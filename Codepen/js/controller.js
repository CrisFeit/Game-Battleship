(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var controller = {
  input: document.getElementById('guessInput'),
  fireButton: document.getElementById('fireButton'),
  btnStart: document.getElementById('start'),
  btnStop: document.getElementById('stop'),
  btnRank: document.getElementById('rank'),
  rankTitle: document.getElementById('rank-title'),
  btnSave: document.getElementById('save-score'),
  inputName: document.getElementById('rank-name'),
  form: document.getElementById('rank-form'),
  grid: document.getElementById('grid'),
  keyPress: function keyPress() {
    this.input.addEventListener('input', function (e) {
      return parseGuess(this, '00', e);

      function parseGuess(campo, Mascara, evento) {
        var boleanoMascara;
        var Digitato = evento.keyCode;
        var campCheck;

        if (campo.value.length > 1) {
          campCheck = campo.value.replace(/[^a-g][^0-6]+/g, "").toUpperCase();
          campo.value = campCheck;
          controller.fireReady(campCheck);
        } else {
          campCheck = campo.value.replace(/[^a-g]+/g, "").toUpperCase();
          controller.abort();
          campo.value = campCheck;
        }

        var posicaoCampo = 0;
        var NovoValorCampo = "";
        var TamanhoMascara = campCheck.length;

        if (Digitato != 8) {
          // backspace
          for (var i = 0; i <= TamanhoMascara; i++) {
            boleanoMascara = Mascara.charAt(i) == "-" || Mascara.charAt(i) == "." || Mascara.charAt(i) == "/";
            boleanoMascara = boleanoMascara || Mascara.charAt(i) == "(" || Mascara.charAt(i) == ")" || Mascara.charAt(i) == " ";

            if (boleanoMascara) {
              NovoValorCampo += Mascara.charAt(i);
              TamanhoMascara++;
            } else {
              NovoValorCampo += campCheck.charAt(posicaoCampo);
              posicaoCampo++;
            }
          }

          campo.value = NovoValorCampo;
          return true;
        } else {
          return true;
        }
      }
    });
    this.grid.addEventListener('touchend', function (ev) {
      var touch = ev.target.getAttribute('id');
      model.fire(touch, ev.target);
    });
  },
  fireReady: function fireReady(campCheck) {
    if (campCheck) {
      var field = document.getElementById(campCheck);

      if (!field.classList.contains('hit') && !field.classList.contains('miss')) {
        var shoot = function shoot() {
          var valor = controller.input.value;
          field = document.getElementById(valor);
          model.fire(valor, field);
          controller.abort(_fireEnter);
        };

        var _fireEnter = function _fireEnter(e) {
          if (e.keyCode === 13) {
            fireButton.click();
          }
        };

        fireButton.disabled = false;
        fireButton.classList.add('is--enabled');
        controller.input.addEventListener('keypress', _fireEnter);
        fireButton.onclick = shoot;
        ;
      } else {
        view.displayMessage('Marked Field');
        controller.abort(fireEnter);
      }

      return false;
    }
  },
  abort: function abort(fireEnter) {
    fireButton.disabled = true;
    fireButton.classList.remove('is--enabled');
    controller.input.removeEventListener('keypress', fireEnter);
    controller.input.value = "";
    controller.input.focus();
  },
  addRank: function addRank() {
    controller.form.classList.add('fade-in');
    controller.btnSave.disabled = false;
    controller.inputName.disabled = false;
    controller.inputName.addEventListener('focusin', function () {
      controller.inputName.classList.remove('is-invalid');
    });
    controller.form.addEventListener('submit', function (e) {
      e.preventDefault();
      var currentScore = model.getScore.score().total;
      var warName = controller.inputName.value;

      if (warName.length == 0 || warName.length > 20) {
        controller.inputName.classList.add('is-invalid');
        return;
      }

      if (currentScore > 600 || !model.init) {
        warName = "Invalid Score";
        controller.inputName.classList.add('is-invalid');
        setTimeout(function () {
          view.stop();
        }, 5000);
        return;
      }

      db.collection('rank').get().then(function (snapshot) {
        var doc = snapshot.docs;

        for (var i = 0; i < doc.length; i++) {
          if (doc[i].data().name.toUpperCase() == warName.trim().toUpperCase() && doc[i].data().score >= currentScore) {
            warName = "Can't be done";
            controller.inputName.classList.add('is-invalid');
            return;
          } else if (doc[i].data().name.toUpperCase() == warName.trim().toUpperCase() && doc[i].data().score < currentScore) {
            db.collection('rank').doc(doc[i].id).update({
              score: currentScore
            });
            controller.form.classList.remove('fade-in');
            setTimeout(function () {
              controller.form.remove();
              view.renderRank();
            }, 2000);
            return;
          } else if (i + 1 === doc.length) {
            db.collection('rank').add({
              name: warName,
              score: currentScore
            });
            controller.form.classList.remove('fade-in');
            setTimeout(function () {
              controller.form.remove();
              view.renderRank();
            }, 2000);
            return;
          }
        }

        ;
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])