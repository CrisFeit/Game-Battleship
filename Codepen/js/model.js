(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var model = {
  square: document.querySelectorAll('.grid div'),
  ships: [{
    id: "ManoWar",
    cordsY: 0,
    cordsX: 0,
    res: 3
  }, {
    id: "Destroyer",
    cordsY: 0,
    cordsX: 0,
    res: 2
  }, {
    id: "Silence",
    cordsY: 0,
    cordsX: 0,
    res: 2
  }],
  init: false,
  fire: function fire(guess, field) {
    shot();

    function shot() {
      var size = document.getElementById('radar-grid').firstElementChild.offsetWidth / 2.5;
      var grid = radar.getElementsByClassName(guess)[0];
      var gridY = grid.offsetTop + grid.offsetHeight / 2;
      var gridX = grid.offsetLeft + grid.offsetWidth / 2;

      for (var i = 0; i < model.ships.length; i++) {
        model.ships[i].cordsY = view.navios[i].offsetTop + view.navios[i].offsetHeight / 2;
        model.ships[i].cordsX = view.navios[i].offsetLeft + view.navios[i].offsetWidth / 2;

        if (model.ships[i].cordsY - size < gridY && gridY < model.ships[i].cordsY + size && model.ships[i].cordsX - size < gridX && gridX < model.ships[i].cordsX + size) {
          hit(model.ships[i], view.navios[i]);
        }
      }

      miss();
    }

    function hit(ship, navio) {
      if (!field.classList.contains('hit') && !field.classList.contains('miss')) {
        ship.res--;

        if (ship.res === 0) {
          ship.sank = true;
          view.damage(navio, 'sunk');
          view.displayMessage('You sank the battleship ' + ship.id);
        } else {
          view.damage(navio, 'hit');
          view.displayMessage(' The ' + ship.id + ' has been hit !  ');
        }

        view.displayHit(guess);

        if (model.isSunk()) {
          view.displayMessage(' Congratulations! You sank all battleships ');
          setTimeout(function () {
            view.displayEndMessage('Mission Complete');
            view.finish();
            view.end(model.getScore.score());
          }, 3000);
        }

        return true;
      }

      return false;
    }

    ;

    function miss() {
      if (!field.classList.contains('miss') && !field.classList.contains('hit')) {
        view.displayMiss(guess);
        view.displayMessage('You missed.');
      }

      return false;
    }

    ;
  },
  isSunk: function isSunk() {
    for (var i = 0; i < model.ships.length; i++) {
      if (!model.ships[i].sank) {
        return false;
      }
    }

    return true;
  },
  getScore: function () {
    function score() {
      var points = {
        shotsHit: 0,
        shotsMiss: 0,
        shipsSunk: 0,
        time: 0,
        total: 0
      };

      if (!model.init) {
        return false;
      }

      var min = document.getElementById('min').firstChild.data;
      var sec = document.getElementById('sec').firstChild.data;
      points.time = parseFloat(min) * 60 + parseFloat(sec);
      model.square.forEach(function (el) {
        if (el.classList.contains('hit')) {
          points.shotsHit++;
        } else if (el.classList.contains('miss')) {
          points.shotsMiss++;
        }
      });
      model.ships.forEach(function (navio) {
        if (navio.res === 0) {
          points.shipsSunk++;
        }
      });
      points.total = points.time + points.shotsHit * 25 + points.shipsSunk * 70 - points.shotsMiss * 10;
      return points;
    }

    return {
      score: score
    };
  }()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])